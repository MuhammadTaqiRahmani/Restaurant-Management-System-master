<div class="popup" id="popup">
    <form method="post" action="/orders">
      <div class="form-group">
        <label for="customerStatusIdInput" id="text2">Customer Status ID</label>
        <input type="number" class="form-control" id="customerInput" placeholder="Enter Customer Status ID" name="customer_status_id">

        <label for="menuItemInput" id="text2">Menu Item ID</label>
        <input type="number" class="form-control" id="customerInput" placeholder="Enter Menu Item ID" name="menu_item_id">

        <label for="amountOfItemsInput" id="text2">Quantity</label>
        <input type="number" class="form-control" id="customerInput" placeholder="Enter Quantity" name="quantity">

        <!-- Removed the Bill Input as it should be calculated server-side based on the items and quantities -->

        <label for="tableInput" id="text2">Table No</label>
        <input type="number" class="form-control"id="customerInput" placeholder="Add Table" name="table_no">

        <div id="buttons">
          <button type="submit" class="btn btn-primary mr-2">Save</button>
          <button type="button" class="btn btn-inverse-dark btn-fw" onclick="closePopup()">Cancel</button>
        </div>
      </div>
    </form>
  </div>




  @app.route("/orders", methods=['GET', 'POST'])
  def orders():
      if request.method == 'POST':
          customer_status_id = request.form.get('customer_status_id')
          menu_item_id = request.form.get('menu_item_id')  # Assuming menu_item_id is sent from the form
          quantity = int(request.form.get('amountOfItems'))
  
          with session_scope() as db_session:
              # Fetch the menu item based on menu_item_id
              menu_item = db_session.query(Menu).filter_by(s_no=menu_item_id).first()
              if not menu_item:
                  return "Menu item not found", 404
  
              # Create a new Order entry
              new_order = Order(customer_status_id=customer_status_id)
              db_session.add(new_order)
              db_session.flush()  # To ensure new_order gets an ID
  
              # Create a new association entry for the order and the menu item
              #order_item_association = order_items_association.insert().values(order_id=new_order.s_no, menu_item_id=menu_item_id, quantity=quantity)
              #db_session.execute(order_item_association)
  
              # Optionally, calculate the bill immediately and update the order
              # This step can be skipped if you prefer to calculate the bill on-the-fly when displaying orders
              new_order.bill = new_order.calculate_bill()
              db_session.add(new_order)
  
      with session_scope() as db_session:
          orders = db_session.query(Order).all()
          orders_list = []
          for order in orders:
              order_details = {
                  'customer_status_id': order.customer_status_id,
                  'items': [{'menu_item_id': item.s_no, 'quantity': assoc.quantity} for item, assoc in order.items],
                  'bill': order.bill
              }
              orders_list.append(order_details)
  
      return render_template("orders.html", orders=orders_list)





FOR messages,
@app.route("/orders", methods=['GET', 'POST'])
def orders():
    if request.method == 'POST':
        customer_status_id = request.form.get('customer_status_id')

        with session_scope() as db_session:
            # Check if the customer_status_id exists in the Status table
            status = db_session.query(Status).filter(Status.s_no == customer_status_id).first()
            if status:
                try:
                    new_order = Order(customer_status_id=customer_status_id)
                    db_session.add(new_order)
                    db_session.commit()
                    return jsonify({'status': 'success', 'message': 'Order added successfully'})
                except IntegrityError:
                    db_session.rollback()
                    return jsonify({'status': 'error', 'message': 'Failed to add order due to a database error'}), 500
            else:
                return jsonify({'status': 'error', 'message': 'Invalid customer status ID'}), 400

    with session_scope() as db_session:
        orders = db_session.query(Order.id, Order.customer_status_id).all()
        orders_list = [{'id': order.id, 'customer_status_id': order.customer_status_id} for order in orders]

    return render_template("orders.html", orders=orders_list)